{"version":3,"sources":["images/close-btn.svg","components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","components/CommentList/CommentList.jsx","components/CommentInfo/CommentInfo.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["module","exports","Loader","className","PostsList","posts","changePostId","useState","isClicked","setIsClicked","length","map","post","key","id","userId","title","type","onClick","CommentList","remove","comments","comment","role","src","closeButton","body","CommentInfo","commentsLength","displayComments","setDisplayComments","displayCommentsOnClick","bool","NewCommentForm","postId","add","name","setName","email","setEmail","setBody","resetForm","onSubmit","event","preventDefault","placeholder","value","onChange","target","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUserPosts","a","method","filter","getPostDetails","getPostComments","addComment","newComment","headers","JSON","stringify","removeComment","commentId","PostDetails","setComments","setPost","removedCommentId","filteredComments","useEffect","getDetails","postFromServer","getComments","commentsFromServer","App","setPosts","setUserId","selectedPostId","setSelectedPostId","userPostsFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b8b697b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/close-btn.6092516e.svg\";","import React from 'react';\r\nimport './Loader.scss';\r\n\r\nexport const Loader = () => (\r\n  <div className=\"Loader\">\r\n    <div className=\"Loader__content\" />\r\n  </div>\r\n);\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './PostsList.scss';\r\n\r\nimport { Loader } from '../Loader';\r\n\r\nexport const PostsList = ({ posts, changePostId }) => {\r\n  const [isClicked, setIsClicked] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {!posts.length ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className=\"PostsList\">\r\n          <h2>Posts:</h2>\r\n          <ul className=\"PostsList__list\">\r\n            {posts.map(post => (\r\n              <li\r\n                key={post.id}\r\n                className=\"PostsList__item\"\r\n              >\r\n                <div>\r\n                  <b>{`User #${post.userId}`}</b>\r\n                  <br />\r\n                  {post.title}\r\n                </div>\r\n\r\n                {isClicked ? \r\n                (<button\r\n                    type=\"button\"\r\n                    className=\"PostsList__button button\"\r\n                    onClick={() => {\r\n                      changePostId(0);\r\n                      setIsClicked(false);\r\n                    }}\r\n                  >\r\n                    Close\r\n                  </button>\r\n                ) : (\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"PostsList__button button\"\r\n                    onClick={() => {\r\n                      changePostId(post.id);\r\n                      setIsClicked(true);\r\n                    }}\r\n                  >\r\n                    Open\r\n                  </button>\r\n                )}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nPostsList.propTypes = {\r\n  posts: PropTypes.arrayOf(PropTypes.shape({\r\n    id: PropTypes.number.isRequired,\r\n    userId: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n  }).isRequired).isRequired,\r\n  changePostId: PropTypes.func.isRequired,\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CommentList.scss';\n\nimport closeButton from '../../images/close-btn.svg';\n\nexport const CommentList = ({ remove, comments }) => (\n  <ul className=\"PostDetails__list\">\n    {comments.map(comment => (\n      <li className=\"PostDetails__list-item\">\n        <img\n          role=\"button\"\n          src={closeButton}\n          className=\"PostDetails__remove-button\"\n          onClick={() => remove(comment.id)}\n        >\n        </img>\n        <p>{comment.body}</p>\n      </li>\n    ))}\n  </ul>\n);\n\nCommentList.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CommentList } from '../CommentList';\n\nexport const CommentInfo = ({\n  commentsLength,\n  comments,\n  remove,\n}) => {\n  const [displayComments, setDisplayComments] = useState(false);\n  const [isClicked, setIsClicked] = useState(false);\n\n  const displayCommentsOnClick = (bool) => {\n    setDisplayComments(bool);\n  };\n\n  return (\n    <section className=\"PostDetails__comments\">\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(false);\n            displayCommentsOnClick(false);\n          }}\n        >\n          {`Hide ${commentsLength} comments`}\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(true);\n            displayCommentsOnClick(true);\n          }}\n        >\n          {`Show ${commentsLength} comments`}\n        </button>\n      )}\n\n      {displayComments && (\n        <CommentList\n          comments={comments}\n          remove={remove}\n        />\n      )}\n    </section>\n  );\n};\n\nCommentInfo.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  remove: PropTypes.func.isRequired,\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './NewCommentForm.scss';\r\n\r\nexport const NewCommentForm = ({\r\n  postId,\r\n  add,\r\n}) => {\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [body, setBody] = useState('');\r\n\r\n  const setValueName = (event) => {\r\n    setName(event.target.value);\r\n  };\r\n\r\n  const setValueEmail = (event) => {\r\n    setEmail(event.target.value);\r\n  };\r\n\r\n  const setValueBody = (event) => {\r\n    setBody(event.target.value);\r\n  };\r\n\r\n  const submitForm = (event) => {\r\n    event.preventDefault();\r\n\r\n    const newComment = {\r\n      postId,\r\n      name,\r\n      email,\r\n      body,\r\n    };\r\n\r\n    add(newComment);\r\n\r\n    resetForm();\r\n  };\r\n\r\n  const resetForm = () => {\r\n    setName('');\r\n    setEmail('');\r\n    setBody('');\r\n  }\r\n\r\n  return (\r\n    <form\r\n      className=\"NewCommentForm\"\r\n      onSubmit={submitForm}\r\n    >\r\n      <div className=\"form-field\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Your name\"\r\n          className=\"NewCommentForm__input\"\r\n          value={name}\r\n          onChange={setValueName}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-field\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"email\"\r\n          placeholder=\"Your email\"\r\n          className=\"NewCommentForm__input\"\r\n          value={email}\r\n          onChange={setValueEmail}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"form-field\">\r\n        <textarea\r\n          name=\"body\"\r\n          placeholder=\"Type comment here\"\r\n          className=\"NewCommentForm__input\"\r\n          value={body}\r\n          onChange={setValueBody}\r\n        />\r\n      </div>\r\n\r\n      <button\r\n        type=\"submit\"\r\n        className=\"NewCommentForm__submit-button button\"\r\n      >\r\n        Add a comment\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nNewCommentForm.propTypes = {\r\n  postId: PropTypes.number.isRequired,\r\n  add: PropTypes.func.isRequired,\r\n};\r\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => request(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => request(url, {\n  method: 'DELETE',\n});\n","import { request } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await request('/posts', { method: 'GET' });\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await request(`/posts/${postId}`, { method: 'GET' });\n\n  if (!postId) {\n    return null;\n  }\n\n  return post;\n};\n","import { request, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await request('/comments');\n\n  if (!postId) {\n    return [];\n  }\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const addComment = async newComment => post('/comments', {\n  ...newComment,\n});\n\nexport const removeComment = async commentId => remove(\n  `/comments/${commentId}`,\n);\n","import React, { useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './PostDetails.scss';\r\n\r\nimport { Loader } from '../Loader';\r\nimport { CommentInfo } from '../CommentInfo';\r\nimport { NewCommentForm } from '../NewCommentForm';\r\n\r\nimport { getPostDetails } from '../../api/posts';\r\nimport { getPostComments, addComment, removeComment } from '../../api/comments';\r\n\r\nexport const PostDetails = ({ postId }) => {\r\n  const [comments, setComments] = useState([]);\r\n  const [post, setPost] = useState(null);\r\n\r\n  const add = async(newComment) => {\r\n    await addComment(newComment);\r\n\r\n    setComments([...comments, newComment]);\r\n  };\r\n\r\n  const remove = async(removedCommentId) => {\r\n    await removeComment(removedCommentId);\r\n    const filteredComments = comments.filter(\r\n      comment => removedCommentId !== comment.id,\r\n    );\r\n\r\n    setComments(filteredComments);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getDetails = async() => {\r\n      const postFromServer = await getPostDetails(postId);\r\n\r\n      setPost(postFromServer);\r\n    };\r\n\r\n    const getComments = async() => {\r\n      const commentsFromServer = await getPostComments(postId);\r\n\r\n      setComments(commentsFromServer);\r\n    };\r\n\r\n    getDetails();\r\n    getComments();\r\n  }, [postId]);\r\n\r\n  return (\r\n    <>\r\n      {!post ? (\r\n        <Loader />\r\n      ) : (\r\n        <div className=\"PostDetails\">\r\n          <h2>Post details:</h2>\r\n\r\n          <section className=\"PostDetails__post\">\r\n            <p>{post.body}</p>\r\n          </section>\r\n\r\n          {!!comments.length && (\r\n            <CommentInfo\r\n              commentsLength={comments.length}\r\n              comments={comments}\r\n              remove={remove}\r\n            />\r\n          )}\r\n\r\n          <section>\r\n            <div className=\"PostDetails__form-wrapper\">\r\n              <NewCommentForm\r\n                postId={postId}\r\n                add={add}\r\n              />\r\n            </div>\r\n          </section>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nPostDetails.propTypes = {\r\n  postId: PropTypes.number.isRequired,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport './styles/general.scss';\r\n\r\nimport { PostsList } from './components/PostsList';\r\nimport { PostDetails } from './components/PostDetails';\r\nimport { getUserPosts } from './api/posts';\r\n\r\nconst App = () => {\r\n  const [posts, setPosts] = useState([]);\r\n  const [userId, setUserId] = useState(0);\r\n  const [selectedPostId, setSelectedPostId] = useState(0);\r\n\r\n  const changePostId = (postId) => {\r\n    setSelectedPostId(postId);\r\n  };\r\n\r\n  const handleChangeUserId = (event) => {\r\n    const { value } = event.target;\r\n\r\n    setUserId(+value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUserPosts(userId)\r\n      .then((userPostsFromServer) => {\r\n        setPosts(userPostsFromServer);\r\n      });\r\n  }, [userId, posts]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App__header\">\r\n        <label>\r\n          Select a user: &nbsp;\r\n\r\n          <select\r\n            className=\"App__user-selector\"\r\n            value={userId}\r\n            onChange={handleChangeUserId}\r\n          >\r\n            <option value=\"0\">All users</option>\r\n            <option value=\"1\">Leanne Graham</option>\r\n            <option value=\"2\">Ervin Howell</option>\r\n            <option value=\"3\">Clementine Bauch</option>\r\n            <option value=\"4\">Patricia Lebsack</option>\r\n            <option value=\"5\">Chelsey Dietrich</option>\r\n            <option value=\"6\">Mrs. Dennis Schulist</option>\r\n            <option value=\"7\">Kurtis Weissnat</option>\r\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\r\n            <option value=\"9\">Glenna Reichert</option>\r\n            <option value=\"10\">Leanne Graham</option>\r\n          </select>\r\n        </label>\r\n      </header>\r\n\r\n      <main className=\"App__main\">\r\n        <div className=\"App__sidebar\">\r\n          <PostsList\r\n            posts={posts}\r\n            changePostId={changePostId}\r\n          />\r\n        </div>\r\n        <div className=\"App__content\">\r\n          {selectedPostId ? (\r\n            <PostDetails\r\n              postId={selectedPostId}\r\n            />\r\n          ) : (<div>Please, choose an item</div>)}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}
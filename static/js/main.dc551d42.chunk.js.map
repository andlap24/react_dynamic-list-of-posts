{"version":3,"sources":["components/Loader/Loader.jsx","components/PostsList/PostsList.jsx","components/CommentList/CommentList.jsx","components/CommentInfo/CommentInfo.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/posts.js","api/comments.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["Loader","className","PostsList","posts","selectPost","selectedPostId","length","map","post","key","id","userId","title","type","onClick","CommentList","remove","comments","comment","body","CommentInfo","commentsLength","useState","displayComments","setDisplayComments","isClicked","setIsClicked","displayCommentsOnClick","bool","NewCommentForm","postId","add","name","setName","email","setEmail","setBody","resetForm","onSubmit","event","preventDefault","placeholder","value","onChange","target","getData","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","getUserPosts","a","method","filter","getPostDetails","getPostComments","addComment","newComment","headers","JSON","stringify","removeComment","commentId","PostDetails","setComments","setPost","removedCommentId","filteredComments","useEffect","getDetails","postFromServer","getComments","commentsFromServer","App","setPosts","setUserId","setSelectedPostId","userPostsFromServer","useCallback","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc551d42.chunk.js","sourcesContent":["import React from 'react';\nimport './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nimport { Loader } from '../Loader';\n\nexport const PostsList = ({ posts, selectPost, selectedPostId }) => (\n  <>\n    {!posts.length ? (\n      <Loader />\n    ) : (\n      <div className=\"PostsList\">\n        <h2>Posts:</h2>\n        <ul className=\"PostsList__list\">\n          {posts.map(post => (\n            <li\n              key={post.id}\n              className=\"PostsList__item\"\n            >\n              <div>\n                <b>{`User #${post.userId}`}</b>\n                <br />\n                {post.title}\n              </div>\n              <button\n                type=\"button\"\n                className=\"PostsList__button button\"\n                onClick={() => {\n                  selectPost(post.id);\n                }}\n              >\n                {selectedPostId === post.id\n                  ? 'Close'\n                  : 'Open'\n                }\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )}\n  </>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  selectPost: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CommentList.scss';\n\nexport const CommentList = ({ remove, comments }) => (\n  <ul className=\"PostDetails__list\">\n    {comments.map(comment => (\n      <li className=\"PostDetails__list-item\">\n        <button\n          type=\"button\"\n          className=\"PostDetails__remove-button button\"\n          onClick={() => remove(comment.id)}\n        >\n          X\n        </button>\n        <p>{comment.body}</p>\n      </li>\n    ))}\n  </ul>\n);\n\nCommentList.propTypes = {\n  remove: PropTypes.func.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CommentList } from '../CommentList';\n\nexport const CommentInfo = ({\n  commentsLength,\n  comments,\n  remove,\n}) => {\n  const [displayComments, setDisplayComments] = useState(false);\n  const [isClicked, setIsClicked] = useState(false);\n\n  const displayCommentsOnClick = (bool) => {\n    setDisplayComments(bool);\n  };\n\n  return (\n    <section className=\"PostDetails__comments\">\n      {isClicked ? (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(false);\n            displayCommentsOnClick(false);\n          }}\n        >\n          {`Hide ${commentsLength} comments`}\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => {\n            setIsClicked(true);\n            displayCommentsOnClick(true);\n          }}\n        >\n          {`Show ${commentsLength} comments`}\n        </button>\n      )}\n\n      {displayComments && (\n        <CommentList\n          comments={comments}\n          remove={remove}\n        />\n      )}\n    </section>\n  );\n};\n\nCommentInfo.propTypes = {\n  commentsLength: PropTypes.number.isRequired,\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    body: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({\n  postId,\n  add,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const setValueName = (event) => {\n    setName(event.target.value);\n  };\n\n  const setValueEmail = (event) => {\n    setEmail(event.target.value);\n  };\n\n  const setValueBody = (event) => {\n    setBody(event.target.value);\n  };\n\n  const submitForm = (event) => {\n    event.preventDefault();\n\n    const newComment = {\n      postId,\n      name,\n      email,\n      body,\n    };\n\n    add(newComment);\n\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={submitForm}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={setValueName}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={setValueEmail}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={setValueBody}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  add: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const getData = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const post = (url, data) => getData(url, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const remove = url => getData(url, {\n  method: 'DELETE',\n});\n","import { getData } from './api';\n\nexport const getUserPosts = async(userId) => {\n  const posts = await getData('/posts', { method: 'GET' });\n\n  if (!userId) {\n    return posts;\n  }\n\n  return posts.filter(post => post.userId === userId);\n};\n\nexport const getPostDetails = async(postId) => {\n  const post = await getData(`/posts/${postId}`, { method: 'GET' });\n\n  if (!postId) {\n    return null;\n  }\n\n  return post;\n};\n","import { getData, post, remove } from './api';\n\nexport const getPostComments = async(postId) => {\n  const comments = await getData('/comments');\n\n  return comments.filter(comment => comment.postId === postId);\n};\n\nexport const addComment = async newComment => (\n  post('/comments', { ...newComment })\n);\n\nexport const removeComment = async commentId => (\n  remove(`/comments/${commentId}`)\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport './PostDetails.scss';\n\nimport { Loader } from '../Loader';\nimport { CommentInfo } from '../CommentInfo';\nimport { NewCommentForm } from '../NewCommentForm';\n\nimport { getPostDetails } from '../../api/posts';\nimport { getPostComments, addComment, removeComment } from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [comments, setComments] = useState([]);\n  const [post, setPost] = useState(null);\n\n  const add = async(newComment) => {\n    await addComment(newComment);\n\n    setComments([...comments, newComment]);\n  };\n\n  const remove = async(removedCommentId) => {\n    await removeComment(removedCommentId);\n    const filteredComments = comments.filter(\n      comment => removedCommentId !== comment.id,\n    );\n\n    setComments(filteredComments);\n  };\n\n  useEffect(() => {\n    const getDetails = async() => {\n      const postFromServer = await getPostDetails(postId);\n\n      setPost(postFromServer);\n    };\n\n    const getComments = async() => {\n      const commentsFromServer = await getPostComments(postId);\n\n      setComments(commentsFromServer);\n    };\n\n    getDetails();\n    getComments();\n  }, [postId]);\n\n  return (\n    <>\n      {!post ? (\n        <Loader />\n      ) : (\n        <div className=\"PostDetails\">\n          <h2>Post details:</h2>\n\n          <section className=\"PostDetails__post\">\n            <p>{post.body}</p>\n          </section>\n\n          {!!comments.length && (\n            <CommentInfo\n              commentsLength={comments.length}\n              comments={comments}\n              remove={remove}\n            />\n          )}\n\n          <section>\n            <div className=\"PostDetails__form-wrapper\">\n              <NewCommentForm\n                postId={postId}\n                add={add}\n              />\n            </div>\n          </section>\n        </div>\n      )}\n    </>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect, useCallback } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [posts, setPosts] = useState([]);\n  const [userId, setUserId] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getUserPosts(userId)\n      .then((userPostsFromServer) => {\n        setPosts(userPostsFromServer);\n      });\n  }, [userId, posts]);\n\n  const changeUserId = (event) => {\n    setUserId(Number(event.target.value));\n  };\n\n  const selectPost = useCallback((postId) => {\n    postId === selectedPostId\n      ? setSelectedPostId(0)\n      : setSelectedPostId(postId);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={userId}\n            onChange={changeUserId}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            selectPost={selectPost}\n          />\n        </div>\n        <div className=\"App__content\">\n          {selectedPostId ? (\n            <PostDetails\n              postId={selectedPostId}\n            />\n          ) : (<div>Please, choose an item</div>)}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}